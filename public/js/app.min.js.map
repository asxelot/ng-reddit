{"version":3,"sources":["directives.js","app.js","controllers.js","factories.js","filters.js"],"names":["inputDirective","restrict","require","link","scope","el","attrs","ngModel","$options","angular","extend","allowInvalid","updateOnDefault","$watch","val","module","config","$routeProvider","$locationProvider","when","templateUrl","controller","resolve","subreddit","$route","_posts","get","page","current","params","$promise","_subreddit","comments","post","html5Mode","$httpProvider","interceptors","push","$q","$rootScope","onError","err","console","error","errors","data","reject","requestError","responseError","$scope","$http","$location","$routeParams","_remove","history","success","user","logout","posts","_id","vote","n","url","put","username","indexOf","isVoted","changePage","search","$on","$$path","subreddits","_setDirty","newSubreddit","submit","newSubredditForm","$invalid","path","name","newComment","expandText","addComment","newCommentForm","save","comment","$setPristine","deleteComment","newPost","type","newPostForm","_afterLogin","newUser","signup","signupForm","loggedUser","login","loginForm","directive","subredditExist","subr","$asyncValidators","subredditAvailable","checkUsername","invalidUsername","test","$validators","emailExist","email","password","matchPassword","confirmPassword","$validate","on","style","height","scrollHeight","factory","$resource","a","e","i","splice","length","form","k","$setDirty","filter","s","parseInt","last","slice","replace","m","split","date","moment","fromNow","$sce","text","trustAsHtml","markdown","toHTML","document","createElement","href","hostname"],"mappings":"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","file":"app.min.js","sourcesContent":["angular\r\n  .module('ngReddit')\r\n\r\n  .directive('subredditExist', function($q, $http) {\r\n    function subredditExist(val) {\r\n      return $q(function(resolve, reject) {\r\n        $http\r\n          .get('/api/check/r/' + val)\r\n          .success(function(subr) {\r\n            subr ? resolve() : reject()\r\n          })\r\n      })\r\n    }\r\n    \r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function(scope, el, attrs, ngModel) {\r\n        ngModel.$asyncValidators.subredditExist = subredditExist\r\n      }\r\n    }\r\n  })\r\n\r\n  .directive('subredditAvailable', function($q, $http) {\r\n    function subredditAvailable(val) {\r\n      return $q(function(resolve, reject) {\r\n        $http\r\n          .get('/api/check/r/' + val)\r\n          .success(function(subr) {\r\n            subr ? reject() : resolve()\r\n          })\r\n      })\r\n    }\r\n    \r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function(scope, el, attrs, ngModel) {\r\n        ngModel.$asyncValidators.subredditAvailable = subredditAvailable\r\n      }\r\n    }\r\n  })\r\n\r\n  .directive('usernameValidator', function($q, $http) {\r\n    function checkUsername(val) {\r\n      return $q(function(resolve, reject) {\r\n        $http\r\n          .get('/api/check/u/' + val)\r\n          .success(function(user) {\r\n            user ? reject() : resolve()\r\n          })\r\n      })\r\n    }\r\n\r\n    function invalidUsername(username) {\r\n      return /^[a-zA-Z][a-zA-Z0-9]+$/.test(username)\r\n    }\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function(scope, el, attrs, ngModel) {\r\n        ngModel.$asyncValidators.checkUsername = checkUsername\r\n        ngModel.$validators.invalidUsername = invalidUsername\r\n      }\r\n    }\r\n  })\r\n\r\n  .directive('emailExist', function($q, $http) {\r\n    function emailExist(val) {\r\n      return $q(function(resolve, reject) {\r\n        $http\r\n          .get('/api/check/email/' + val)\r\n          .success(function(email) {\r\n            email ? reject() : resolve()\r\n          })\r\n      })\r\n    }\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function(scope, el, attrs, ngModel) {\r\n        ngModel.$asyncValidators.emailExist = emailExist\r\n      }\r\n    }\r\n  })\r\n\r\n  .directive('matchTo', function() {\r\n    return {\r\n      restrict: 'A',\r\n      scope: {\r\n        password: '=matchTo'\r\n      },\r\n      require: 'ngModel',\r\n      link: function(scope, el, attrs, ngModel) {\r\n        ngModel.$validators.matchPassword = function(confirmPassword) {\r\n          return scope.password == confirmPassword\r\n        }\r\n\r\n        scope.$watch('password', ngModel.$validate)\r\n      }\r\n    }\r\n  })\r\n\r\n  .directive('elasticTextarea', function() {\r\n    return {\r\n      restrict: 'A',\r\n      link: function(scope, el) {\r\n        el.on('input', function() {\r\n          el[0].style.height = el[0].scrollHeight + 'px'\r\n        })\r\n      }\r\n    }\r\n  })\r\n\r\n  .directive('input', inputDirective)\r\n\r\n  .directive('textarea', inputDirective)\r\n\r\n\r\nfunction inputDirective() {\r\n  return {\r\n    restrict: 'E',\r\n    require: 'ngModel',\r\n    link: function(scope, el, attrs, ngModel) {\r\n      ngModel.$options = ngModel.$options || {}\r\n      angular.extend(\r\n        ngModel.$options, \r\n        {allowInvalid: true, updateOnDefault: true}\r\n      )\r\n\r\n      scope.$watch(attrs.ngModel, function(val) {\r\n        el[val?'addClass':'removeClass']('ng-not-empty')\r\n      })\r\n    }\r\n  }  \r\n}","angular.module('ngReddit', [\r\n    'ngMessages',\r\n    'ngResource',\r\n    'ngRoute'\r\n  ])\r\n\r\n  .config(function($routeProvider, $locationProvider) {\r\n    $routeProvider\r\n      .when('/', {\r\n        templateUrl: 'views/home.html',\r\n        controller: 'homeCtrl',\r\n        resolve: {\r\n          subreddit: function($route, _posts) {\r\n            return _posts.get({\r\n              page: $route.current.params.page || 1\r\n            }).$promise\r\n          }\r\n        }\r\n      })\r\n      .when('/r/:subreddit', {\r\n        templateUrl: 'views/home.html',\r\n        controller: 'subredditCtrl',\r\n        resolve: {\r\n          subreddit: function($route, _subreddit) {\r\n            return _subreddit.get({\r\n              subreddit: $route.current.params.subreddit,\r\n              page: $route.current.params.page || 1\r\n            }).$promise\r\n          }\r\n        }\r\n      })\r\n      .when('/r/:subreddit/comments/:post', {\r\n        templateUrl: 'views/post.html',\r\n        controller: 'postCtrl',\r\n        resolve: {\r\n          subreddit: function($route, _subreddit) {\r\n            return _subreddit.get({\r\n              subreddit: $route.current.params.subreddit,\r\n              comments: 'comments',\r\n              post: $route.current.params.post\r\n            }).$promise\r\n          }\r\n        }\r\n      })\r\n      .when('/subreddits', {\r\n        templateUrl: 'views/subreddits.html',\r\n        controller: 'subredditsCtrl'\r\n      })\r\n      .when('/subreddits/create', {\r\n        templateUrl: 'views/newSubreddit.html',\r\n        controller: 'newSubredditCtrl'\r\n      })\r\n      .when('/submit/:type', {\r\n        templateUrl: 'views/submit.html',\r\n        controller: 'submitCtrl'\r\n      })\r\n      .when('/signup', {\r\n        templateUrl: 'views/signup.html',\r\n        controller: 'signupCtrl'\r\n      })\r\n      .when('/login', {\r\n        templateUrl: 'views/login.html',\r\n        controller: 'loginCtrl'\r\n      })\r\n\r\n\r\n    $locationProvider.html5Mode(true)\r\n  })\r\n\r\n  .config(function($httpProvider) {\r\n    $httpProvider.interceptors.push(function($q, $rootScope) {\r\n      function onError(err) {\r\n        console.error(err)\r\n        $rootScope.errors.push(err.data)\r\n        return $q.reject(err)\r\n      }\r\n\r\n      return {\r\n        requestError: onError,\r\n        responseError: onError\r\n      }\r\n    })\r\n  })","angular\r\n  .module('ngReddit')\r\n\r\n  .controller('mainCtrl', function($rootScope, $scope, $http, $location,\r\n                          $routeParams, _subreddit, _remove) {\r\n    $scope.page = $routeParams.page || 1\r\n    $rootScope.errors = []\r\n    $rootScope.history = []\r\n\r\n    $http.get('/api/check/auth').success(function(user) {\r\n      $rootScope.user = user\r\n    })\r\n\r\n    $scope.logout = function() {\r\n      $http.get('/api/logout').success(function() {\r\n        $rootScope.user = null\r\n      })\r\n    } \r\n\r\n    $scope.delete = function(posts, post) {\r\n      return _subreddit.delete({\r\n        subreddit: post.subreddit,\r\n        comments: 'comments',\r\n        post: post._id\r\n      }, function() {\r\n        _remove(posts, post)\r\n      })\r\n    }\r\n\r\n    $scope.vote = function(n, post) {\r\n      if (!$rootScope.user) return false\r\n\r\n      var url = '/api/' + \r\n                (post.comments ? 'posts/' : 'comments/') +\r\n                post._id + '/vote/' + n\r\n\r\n      $http.put(url).success(function() {\r\n        var vote = n > 0 ? 'upvotes' : 'downvotes',\r\n            username = $rootScope.user.username\r\n\r\n        if (~post[vote].indexOf(username))\r\n          _remove(post[vote], username)\r\n        else\r\n          post[vote].push(username)\r\n        \r\n        _remove(post[n < 0 ? 'upvotes' : 'downvotes'], username)\r\n      })\r\n    }\r\n\r\n    $scope.isVoted = function(n, post) {\r\n      if (!$rootScope.user) return false\r\n\r\n      var vote = n > 0 ? 'upvotes' : 'downvotes'\r\n\r\n      return ~post[vote].indexOf($rootScope.user.username)\r\n    }\r\n\r\n    $scope.changePage = function(n) {\r\n      $location.search('page', $scope.page += n)\r\n    }\r\n\r\n    $rootScope.$on('$routeChangeSuccess', function() {\r\n      $rootScope.history.push($location.$$path)\r\n    })\r\n  })\r\n\r\n  .controller('homeCtrl', function($scope, $rootScope, $routeParams, \r\n                          subreddit) {\r\n    $rootScope.subreddit = subreddit\r\n  })\r\n\r\n  .controller('subredditCtrl', function($rootScope, $scope, $routeParams, \r\n                                subreddit) {\r\n    $rootScope.subreddit = subreddit\r\n  })\r\n\r\n  .controller('subredditsCtrl', function($scope, $http) {\r\n    $http\r\n      .get('/api/r')\r\n      .success(function(subreddits) {\r\n        $scope.subreddits = subreddits\r\n      })\r\n  })\r\n\r\n  .controller('newSubredditCtrl', function($scope, $http, $location, \r\n                                  _setDirty) {\r\n    $scope.newSubreddit = {}\r\n\r\n    $scope.submit = function() {\r\n      if ($scope.newSubredditForm.$invalid)\r\n        return _setDirty($scope.newSubredditForm)\r\n\r\n      $http\r\n        .post('/api/r', $scope.newSubreddit)\r\n        .success(function(subreddit) {\r\n          $location.path('/r/' + subreddit.name)\r\n        })\r\n    }\r\n  })\r\n\r\n  .controller('postCtrl', function($rootScope, $scope, $http,\r\n                          subreddit, _subreddit, _setDirty, _remove) {\r\n    $scope.newComment = {}\r\n    $scope.expandText = true\r\n    $rootScope.subreddit = subreddit\r\n\r\n    $scope.addComment = function() {\r\n      if ($scope.newCommentForm.$invalid)\r\n        return _setDirty($scope.newCommentForm)\r\n\r\n      _subreddit.save({\r\n        subreddit: $scope.subreddit.name,\r\n        comments: 'comments',\r\n        post: $scope.subreddit.posts[0]._id\r\n      }, $scope.newComment, function(comment) {\r\n        $scope.subreddit.posts[0].comments.push(comment)\r\n        $scope.newComment = {}\r\n        $scope.newCommentForm.comment.$setPristine()\r\n      })\r\n    }\r\n\r\n    $scope.deleteComment = function(comment) {\r\n      $http\r\n        .delete('/api/comments/' + comment._id)\r\n        .success(function() {\r\n          _remove($scope.subreddit.posts[0].comments, comment)\r\n        })\r\n\r\n      return false\r\n    }\r\n  })\r\n\r\n  .controller('submitCtrl', function($scope, $routeParams, $location, \r\n                            _subreddit, _setDirty) {\r\n    $scope.newPost = {}\r\n    $scope.type = $routeParams.type\r\n    \r\n    if ($scope.subreddit) \r\n      $scope.newPost.subreddit = $scope.subreddit.name\r\n\r\n    $scope.submit = function() {\r\n      if ($scope.newPostForm.$invalid)\r\n        return _setDirty($scope.newPostForm)\r\n\r\n      _subreddit.save({ \r\n        subreddit: $scope.newPost.subreddit \r\n      }, $scope.newPost, function(post) {\r\n        $location.path('/r/' + post.subreddit + '/comments/' + post._id)\r\n      })\r\n    }\r\n  })\r\n\r\n  .controller('signupCtrl', function($rootScope, $scope, $http, $location,\r\n                            _afterLogin, _setDirty) {\r\n    if ($rootScope.user) return $location.path('/')\r\n    $scope.newUser = {}\r\n\r\n    $scope.signup = function() {\r\n      if ($scope.signupForm.$invalid) \r\n        return _setDirty($scope.signupForm)\r\n\r\n      $http\r\n        .post('/api/signup', $scope.newUser)\r\n        .success(_afterLogin)\r\n    }\r\n  })\r\n\r\n  .controller('loginCtrl', function($rootScope, $scope, $http, $location,\r\n                           _afterLogin, _setDirty) {\r\n    if ($rootScope.user) return $location.path('/')\r\n    $scope.loggedUser = {}\r\n\r\n    $scope.login = function() {\r\n      if ($scope.loginForm.$invalid)\r\n        return _setDirty($scope.loginForm)\r\n\r\n      $http\r\n        .post('/api/login', $scope.loggedUser)\r\n        .success(_afterLogin)\r\n    }\r\n  })","angular\r\n  .module('ngReddit')\r\n\r\n  .factory('_subreddit', function($resource) {\r\n    return $resource('/api/r/:subreddit/:comments/:post')\r\n  })\r\n\r\n  .factory('_posts', function($resource) {\r\n    return $resource('/api/posts/')\r\n  })\r\n\r\n  .factory('_authUser', function($resource) {\r\n    return $resource('/api/authcheck')\r\n  })\r\n\r\n  .factory('_remove', function() {\r\n    return function(a, e) {\r\n      var i = a.indexOf(e)\r\n      if (i > -1) return a.splice(i, 1)\r\n    }\r\n  })\r\n\r\n  .factory('_afterLogin', function($http, $rootScope, $location) {\r\n    return function(user) {\r\n      $rootScope.user = user\r\n      $location.path($rootScope.history[$rootScope.history.length-2] || '/')\r\n    }\r\n  })\r\n\r\n  .factory('_setDirty', function() {\r\n    return function(form) {\r\n      for (var k in form) \r\n        if (/^[^$]/.test(k)) form[k].$setDirty()      \r\n    }\r\n  })","angular\r\n  .module('ngReddit')\r\n\r\n  .filter('pluralize', function() {\r\n    // {{post.comments.length + ' комментари(й,я,ев)' | pluralize}}\r\n\r\n    return function(s) {\r\n      var n = '' + parseInt(s),\r\n          last = n.slice(-1)\r\n\r\n      return s.replace(/\\(([^)]+)\\)/, function(m) {\r\n        m = m.slice(1, -1).split(',')\r\n\r\n        if (n.slice(-2, -1) == 1 || last > 4 || last === '0')\r\n          return m[2]\r\n        else if (last == 1)\r\n          return m[0]\r\n        else\r\n          return m[1]\r\n      })\r\n    }\r\n  })\r\n\r\n  .filter('fromNow', function() {\r\n    return function(date) {\r\n      return moment(date).fromNow()\r\n    }\r\n  })\r\n\r\n  .filter('md', function($sce) {\r\n    return function(text) {\r\n      return $sce.trustAsHtml(markdown.toHTML(text || ''))\r\n    }\r\n  })\r\n\r\n  .filter('hostname', function() {\r\n    return function(link) {\r\n      if (!link) return 'self'\r\n      var a = document.createElement('a')\r\n      a.href = link\r\n      return a.hostname\r\n    }\r\n  })"],"sourceRoot":"/source/"}