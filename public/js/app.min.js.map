{"version":3,"sources":["directives.js","app.js","controllers.js","factories.js","filters.js"],"names":["inputDirective","restrict","require","link","scope","el","attrs","ngModel","$options","angular","extend","allowInvalid","updateOnDefault","$watch","val","module","config","$routeProvider","$locationProvider","when","templateUrl","controller","reloadOnSearch","resolve","subreddit","$route","_posts","get","page","current","params","$promise","_subreddit","comments","post","results","_search","query","html5Mode","$httpProvider","interceptors","push","$q","$rootScope","onError","err","console","error","errors","data","reject","requestError","responseError","$scope","$http","$location","$anchorScroll","_vote","_remove","search","history","vote","success","user","logout","posts","_id","path","isVoted","n","indexOf","username","changePage","window","encodeURIComponent","$on","$$path","$routeParams","subreddits","_setDirty","newSubreddit","submit","newSubredditForm","$invalid","name","newComment","expandText","addComment","newCommentForm","save","comment","$setPristine","deleteComment","newPost","type","newPostForm","_afterLogin","newUser","signup","signupForm","loggedUser","login","loginForm","directive","subredditExist","subr","$asyncValidators","subredditAvailable","checkUsername","invalidUsername","test","$validators","emailExist","email","password","matchPassword","confirmPassword","$validate","on","style","height","scrollHeight","factory","$resource","a","e","i","splice","url","put","length","form","k","$setDirty","filter","s","parseInt","last","slice","replace","m","split","date","moment","fromNow","$sce","text","trustAsHtml","markdown","toHTML","document","createElement","href","hostname"],"mappings":"AAyHA,QAASA,kBACP,OACEC,SAAU,IACVC,QAAS,UACTC,KAAM,SAASC,EAAOC,EAAIC,EAAOC,GAC/BA,EAAQC,SAAWD,EAAQC,aAC3BC,QAAQC,OACNH,EAAQC,UACPG,cAAc,EAAMC,iBAAiB,IAGxCR,EAAMS,OAAOP,EAAMC,QAAS,SAASO,GACnCT,EAAGS,EAAI,WAAW,eAAe,oBCrIzCL,QAAQM,OAAO,YACX,aACA,aACA,YAGDC,QAAA,iBAAA,oBAAO,SAASC,EAAgBC,GAC/BD,EACGE,KAAK,KACJC,YAAa,kBACbC,WAAY,WACZC,gBAAgB,EAChBC,SACEC,WAAA,SAAA,SAAW,SAASC,EAAQC,GAC1B,MAAOA,GAAOC,KACZC,KAAMH,EAAOI,QAAQC,OAAOF,MAAQ,IACnCG,cAIRZ,KAAK,iBACJC,YAAa,kBACbC,WAAY,gBACZE,SACEC,WAAA,SAAA,aAAW,SAASC,EAAQO,GAC1B,MAAOA,GAAWL,KAChBH,UAAWC,EAAOI,QAAQC,OAAON,UACjCI,KAAMH,EAAOI,QAAQC,OAAOF,MAAQ,IACnCG,cAIRZ,KAAK,gCACJC,YAAa,kBACbC,WAAY,WACZE,SACEC,WAAA,SAAA,aAAW,SAASC,EAAQO,GAC1B,MAAOA,GAAWL,KAChBH,UAAWC,EAAOI,QAAQC,OAAON,UACjCS,SAAU,WACVC,KAAMT,EAAOI,QAAQC,OAAOI,OAC3BH,cAIRZ,KAAK,eACJC,YAAa,wBACbC,WAAY,mBAEbF,KAAK,sBACJC,YAAa,0BACbC,WAAY,qBAEbF,KAAK,iBACJC,YAAa,oBACbC,WAAY,eAEbF,KAAK,kBACJC,YAAa,oBACbC,WAAY,aACZE,SACEY,SAAA,SAAA,UAAS,SAASV,EAAQW,GACxB,MAAOA,GAAQC,OACbA,MAAOZ,EAAOI,QAAQC,OAAOO,aAKpClB,KAAK,WACJC,YAAa,oBACbC,WAAY,eAEbF,KAAK,UACJC,YAAa,mBACbC,WAAY,cAIhBH,EAAkBoB,WAAU,MAG7BtB,QAAA,gBAAO,SAASuB,GACfA,EAAcC,aAAaC,MAAA,KAAA,aAAK,SAASC,EAAIC,GAC3C,QAASC,GAAQC,GAGf,MAFAC,SAAQC,MAAMF,GACdF,EAAWK,OAAOP,KAAKI,EAAII,MACpBP,EAAGQ,OAAOL,GAGnB,OACEM,aAAcP,EACdQ,cAAeR,SC3FvBnC,QACGM,OAAO,YAEPM,WAAW,YAAA,aAAA,SAAA,QAAA,YAAA,gBAAA,aAAA,QAAA,UAAY,SAASsB,EAAYU,EAAQC,EAAOC,EACpCC,EAAexB,EAAYyB,EAAOC,GACxDL,EAAOzB,MAAQ2B,EAAUI,SAAS/B,MAAQ,EAC1Ce,EAAWK,UACXL,EAAWiB,WACXP,EAAOQ,KAAOJ,EAEdH,EAAM3B,IAAI,mBAAmBmC,QAAQ,SAASC,GAC5CpB,EAAWoB,KAAOA,IAGpBV,EAAOW,OAAS,WACdV,EAAM3B,IAAI,eAAemC,QAAQ,WAC/BnB,EAAWoB,KAAO,QAItBV,EAAAA,UAAgB,SAASY,EAAO/B,GAC9B,MAAOF,GAAAA,WACLR,UAAWU,EAAKV,UAChBS,SAAU,WACVC,KAAMA,EAAKgC,KACV,WACDR,EAAQO,EAAO/B,IACVqB,EAAUY,OAAOR,OAAO,aAC3BJ,EAAUY,KAAK,QAIrBd,EAAOe,QAAU,SAASlC,EAAMmC,GAC9B,IAAK1B,EAAWoB,KAAM,OAAO,CAE7B,IAAIF,GAAOQ,EAAI,EAAI,UAAY,WAE/B,QAAQnC,EAAK2B,GAAMS,QAAQ3B,EAAWoB,KAAKQ,WAG7ClB,EAAOmB,WAAa,SAASH,GAC3Bd,EAAUI,OAAO,OAAQN,EAAOzB,MAAQyC,GACxCb,EAAc,IAGhBH,EAAOM,OAAS,WACdJ,EAAUY,KAAK,WAAaM,OAAOC,mBAAmBrB,EAAOhB,QAC7DgB,EAAOhB,MAAQ,IAGjBM,EAAWgC,IAAI,sBAAuB,WACpChC,EAAWiB,QAAQnB,KAAKc,EAAUqB,aAIrCvD,WAAW,YAAA,SAAA,aAAA,eAAA,YAAY,SAASgC,EAAQV,EAAYkC,EAC7BrD,GACtBmB,EAAWnB,UAAYA,KAGxBH,WAAW,iBAAA,aAAA,SAAA,eAAA,YAAiB,SAASsB,EAAYU,EAAQwB,EAC5BrD,GAC5BmB,EAAWnB,UAAYA,KAGxBH,WAAW,kBAAA,SAAA,QAAkB,SAASgC,EAAQC,GAC7CA,EACG3B,IAAI,UACJmC,QAAQ,SAASgB,GAChBzB,EAAOyB,WAAaA,OAIzBzD,WAAW,oBAAA,SAAA,QAAA,YAAA,YAAoB,SAASgC,EAAQC,EAAOC,EACxBwB,GAC9B1B,EAAO2B,gBAEP3B,EAAO4B,OAAS,WACd,MAAI5B,GAAO6B,iBAAiBC,SACnBJ,EAAU1B,EAAO6B,sBAE1B5B,GACGpB,KAAK,SAAUmB,EAAO2B,cACtBlB,QAAQ,SAAStC,GAChB+B,EAAUY,KAAK,MAAQ3C,EAAU4D,YAKxC/D,WAAW,YAAA,aAAA,SAAA,QAAA,YAAA,aAAA,YAAA,UAAY,SAASsB,EAAYU,EAAQC,EAC7B9B,EAAWQ,EAAY+C,EAAWrB,GACxDL,EAAOgC,cACPhC,EAAOiC,YAAa,EACpB3C,EAAWnB,UAAYA,EAEvB6B,EAAOkC,WAAa,WAClB,MAAIlC,GAAOmC,eAAeL,SACjBJ,EAAU1B,EAAOmC,oBAE1BxD,GAAWyD,MACTjE,UAAW6B,EAAO7B,UAAU4D,KAC5BnD,SAAU,WACVC,KAAMmB,EAAO7B,UAAUyC,MAAM,GAAGC,KAC/Bb,EAAOgC,WAAY,SAASK,GAC7BrC,EAAO7B,UAAUyC,MAAM,GAAGhC,SAASQ,KAAKiD,GACxCrC,EAAOgC,cACPhC,EAAOmC,eAAeE,QAAQC,kBAIlCtC,EAAOuC,cAAgB,SAASF,GAO9B,MANApC,GAAAA,UACU,iBAAmBoC,EAAQxB,KAClCJ,QAAQ,WACPJ,EAAQL,EAAO7B,UAAUyC,MAAM,GAAGhC,SAAUyD,MAGzC,MAIVrE,WAAW,cAAA,SAAA,eAAA,YAAA,aAAA,YAAc,SAASgC,EAAQwB,EAActB,EAC/BvB,EAAY+C,GACpC1B,EAAOwC,WACPxC,EAAOyC,KAAOjB,EAAaiB,KAEvBzC,EAAO7B,YACT6B,EAAOwC,QAAQrE,UAAY6B,EAAO7B,UAAU4D,MAE9C/B,EAAO4B,OAAS,WACd,MAAI5B,GAAO0C,YAAYZ,SACdJ,EAAU1B,EAAO0C,iBAE1B/D,GAAWyD,MACTjE,UAAW6B,EAAOwC,QAAQrE,WACzB6B,EAAOwC,QAAS,SAAS3D,GAC1BqB,EAAUY,KAAK,MAAQjC,EAAKV,UAAY,aAAeU,EAAKgC,WAKjE7C,WAAW,cAAA,SAAA,UAAc,SAASgC,EAAQlB,GACzCkB,EAAO7B,WACLyC,MAAO9B,MAIVd,WAAW,cAAA,aAAA,SAAA,QAAA,YAAA,cAAA,YAAc,SAASsB,EAAYU,EAAQC,EAAOC,EACpCyC,EAAajB,GACrC,MAAIpC,GAAWoB,KAAaR,EAAUY,KAAK,MAC3Cd,EAAO4C,gBAEP5C,EAAO6C,OAAS,WACd,MAAI7C,GAAO8C,WAAWhB,SACbJ,EAAU1B,EAAO8C,gBAE1B7C,GACGpB,KAAK,cAAemB,EAAO4C,SAC3BnC,QAAQkC,SAId3E,WAAW,aAAA,aAAA,SAAA,QAAA,YAAA,cAAA,YAAa,SAASsB,EAAYU,EAAQC,EAAOC,EACpCyC,EAAajB,GACpC,MAAIpC,GAAWoB,KAAaR,EAAUY,KAAK,MAC3Cd,EAAO+C,mBAEP/C,EAAOgD,MAAQ,WACb,MAAIhD,GAAOiD,UAAUnB,SACZJ,EAAU1B,EAAOiD,eAE1BhD,GACGpB,KAAK,aAAcmB,EAAO+C,YAC1BtC,QAAQkC,SF7KjBvF,QACGM,OAAO,YAEPwF,UAAU,kBAAA,KAAA,QAAkB,SAAS7D,EAAIY,GACxC,QAASkD,GAAe1F,GACtB,MAAO4B,GAAG,SAASnB,EAAS2B,GAC1BI,EACG3B,IAAI,gBAAkBb,GACtBgD,QAAQ,SAAS2C,GAChBA,EAAOlF,IAAY2B,QAK3B,OACEjD,SAAU,IACVC,QAAS,UACTC,KAAM,SAASC,EAAOC,EAAIC,EAAOC,GAC/BA,EAAQmG,iBAAiBF,eAAiBA,OAK/CD,UAAU,sBAAA,KAAA,QAAsB,SAAS7D,EAAIY,GAC5C,QAASqD,GAAmB7F,GAC1B,MAAO4B,GAAG,SAASnB,EAAS2B,GAC1BI,EACG3B,IAAI,gBAAkBb,GACtBgD,QAAQ,SAAS2C,GAChBA,EAAOvD,IAAW3B,QAK1B,OACEtB,SAAU,IACVC,QAAS,UACTC,KAAM,SAASC,EAAOC,EAAIC,EAAOC,GAC/BA,EAAQmG,iBAAiBC,mBAAqBA,OAKnDJ,UAAU,qBAAA,KAAA,QAAqB,SAAS7D,EAAIY,GAC3C,QAASsD,GAAc9F,GACrB,MAAO4B,GAAG,SAASnB,EAAS2B,GAC1BI,EACG3B,IAAI,gBAAkBb,GACtBgD,QAAQ,SAASC,GAChBA,EAAOb,IAAW3B,QAK1B,QAASsF,GAAgBtC,GACvB,MAAO,yBAAyBuC,KAAKvC,GAGvC,OACEtE,SAAU,IACVC,QAAS,UACTC,KAAM,SAASC,EAAOC,EAAIC,EAAOC,GAC/BA,EAAQmG,iBAAiBE,cAAgBA,EACzCrG,EAAQwG,YAAYF,gBAAkBA,OAK3CN,UAAU,cAAA,KAAA,QAAc,SAAS7D,EAAIY,GACpC,QAAS0D,GAAWlG,GAClB,MAAO4B,GAAG,SAASnB,EAAS2B,GAC1BI,EACG3B,IAAI,oBAAsBb,GAC1BgD,QAAQ,SAASmD,GAChBA,EAAQ/D,IAAW3B,QAK3B,OACEtB,SAAU,IACVC,QAAS,UACTC,KAAM,SAASC,EAAOC,EAAIC,EAAOC,GAC/BA,EAAQmG,iBAAiBM,WAAaA,OAK3CT,UAAU,UAAW,WACpB,OACEtG,SAAU,IACVG,OACE8G,SAAU,YAEZhH,QAAS,UACTC,KAAM,SAASC,EAAOC,EAAIC,EAAOC,GAC/BA,EAAQwG,YAAYI,cAAgB,SAASC,GAC3C,MAAOhH,GAAM8G,UAAYE,GAG3BhH,EAAMS,OAAO,WAAYN,EAAQ8G,eAKtCd,UAAU,kBAAmB,WAC5B,OACEtG,SAAU,IACVE,KAAM,SAASC,EAAOC,GACpBA,EAAGiH,GAAG,QAAS,WACbjH,EAAG,GAAGkH,MAAMC,OAASnH,EAAG,GAAGoH,aAAe,WAMjDlB,UAAU,QAASvG,gBAEnBuG,UAAU,WAAYvG,gBGtHzBS,QACGM,OAAO,YAEP2G,QAAQ,cAAA,YAAc,SAASC,GAC9B,MAAOA,GAAU,wCAGlBD,QAAQ,UAAA,YAAU,SAASC,GAC1B,MAAOA,GAAU,kBAGlBD,QAAQ,WAAA,YAAW,SAASC,GAC3B,MAAOA,GAAU,yBAGlBD,QAAQ,aAAA,YAAa,SAASC,GAC7B,MAAOA,GAAU,qBAGlBD,QAAQ,UAAW,WAClB,MAAO,UAASE,EAAGC,GACjB,GAAIC,GAAIF,EAAEtD,QAAQuD,EAClB,OAAIC,GAAI,GAAWF,EAAEG,OAAOD,EAAG,GAA/B,UAIHJ,QAAQ,SAAA,QAAA,aAAA,UAAS,SAASpE,EAAOX,EAAYe,GAC5C,MAAO,UAASxB,EAAMmC,GACpB,GAAK1B,EAAWoB,KAAhB,CAEA,GAAIQ,GAAW5B,EAAWoB,KAAKQ,SAC3BV,EAAOQ,EAAI,EAAI,UAAY,YAC3B2D,EAAM,SACC9F,EAAKD,SAAW,SAAW,aAC5BC,EAAKgC,IAAM,SAAWG,CAEhCf,GAAM2E,IAAID,GAAKlE,QAAQ,YAChB5B,EAAK2B,GAAMS,QAAQC,GACtBb,EAAQxB,EAAK2B,GAAOU,GAEpBrC,EAAK2B,GAAMpB,KAAK8B,GAElBb,EAAQxB,EAAS,EAAJmC,EAAQ,UAAY,aAAcE,UAKpDmD,QAAQ,eAAA,QAAA,aAAA,YAAe,SAASpE,EAAOX,EAAYY,GAClD,MAAO,UAASQ,GACdpB,EAAWoB,KAAOA,EAClBR,EAAUY,KAAKxB,EAAWiB,QAAQjB,EAAWiB,QAAQsE,OAAO,IAAM,SAIrER,QAAQ,YAAa,WACpB,MAAO,UAASS,GACd,IAAK,GAAIC,KAAKD,GACR,QAAQrB,KAAKsB,IAAID,EAAKC,GAAGC,eCzDrC5H,QACGM,OAAO,YAEPuH,OAAO,YAAa,WAGnB,MAAO,UAASC,GACd,GAAIlE,GAAI,GAAKmE,SAASD,GAClBE,EAAOpE,EAAEqE,MAAM,GAEnB,OAAOH,GAAEI,QAAQ,cAAe,SAASC,GAGvC,MAFAA,GAAIA,EAAEF,MAAM,EAAG,IAAIG,MAAM,KAEF,GAAnBxE,EAAEqE,MAAM,GAAI,KAAYD,EAAO,GAAc,MAATA,EAC/BG,EAAE,GACM,GAARH,EACAG,EAAE,GAEFA,EAAE,QAKhBN,OAAO,UAAW,WACjB,MAAO,UAASQ,GACd,MAAOC,QAAOD,GAAME,aAIvBV,OAAO,MAAA,OAAM,SAASW,GACrB,MAAO,UAASC,GACd,MAAOD,GAAKE,YAAYC,SAASC,OAAOH,GAAQ,SAInDZ,OAAO,WAAY,WAClB,MAAO,UAASnI,GACd,IAAKA,EAAM,MAAO,MAClB,IAAIyH,GAAI0B,SAASC,cAAc,IAE/B,OADA3B,GAAE4B,KAAOrJ,EACFyH,EAAE6B","file":"app.min.js","sourcesContent":["angular\r\n  .module('ngReddit')\r\n\r\n  .directive('subredditExist', function($q, $http) {\r\n    function subredditExist(val) {\r\n      return $q(function(resolve, reject) {\r\n        $http\r\n          .get('/api/check/r/' + val)\r\n          .success(function(subr) {\r\n            subr ? resolve() : reject()\r\n          })\r\n      })\r\n    }\r\n    \r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function(scope, el, attrs, ngModel) {\r\n        ngModel.$asyncValidators.subredditExist = subredditExist\r\n      }\r\n    }\r\n  })\r\n\r\n  .directive('subredditAvailable', function($q, $http) {\r\n    function subredditAvailable(val) {\r\n      return $q(function(resolve, reject) {\r\n        $http\r\n          .get('/api/check/r/' + val)\r\n          .success(function(subr) {\r\n            subr ? reject() : resolve()\r\n          })\r\n      })\r\n    }\r\n    \r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function(scope, el, attrs, ngModel) {\r\n        ngModel.$asyncValidators.subredditAvailable = subredditAvailable\r\n      }\r\n    }\r\n  })\r\n\r\n  .directive('usernameValidator', function($q, $http) {\r\n    function checkUsername(val) {\r\n      return $q(function(resolve, reject) {\r\n        $http\r\n          .get('/api/check/u/' + val)\r\n          .success(function(user) {\r\n            user ? reject() : resolve()\r\n          })\r\n      })\r\n    }\r\n\r\n    function invalidUsername(username) {\r\n      return /^[a-zA-Z][a-zA-Z0-9]+$/.test(username)\r\n    }\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function(scope, el, attrs, ngModel) {\r\n        ngModel.$asyncValidators.checkUsername = checkUsername\r\n        ngModel.$validators.invalidUsername = invalidUsername\r\n      }\r\n    }\r\n  })\r\n\r\n  .directive('emailExist', function($q, $http) {\r\n    function emailExist(val) {\r\n      return $q(function(resolve, reject) {\r\n        $http\r\n          .get('/api/check/email/' + val)\r\n          .success(function(email) {\r\n            email ? reject() : resolve()\r\n          })\r\n      })\r\n    }\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function(scope, el, attrs, ngModel) {\r\n        ngModel.$asyncValidators.emailExist = emailExist\r\n      }\r\n    }\r\n  })\r\n\r\n  .directive('matchTo', function() {\r\n    return {\r\n      restrict: 'A',\r\n      scope: {\r\n        password: '=matchTo'\r\n      },\r\n      require: 'ngModel',\r\n      link: function(scope, el, attrs, ngModel) {\r\n        ngModel.$validators.matchPassword = function(confirmPassword) {\r\n          return scope.password == confirmPassword\r\n        }\r\n\r\n        scope.$watch('password', ngModel.$validate)\r\n      }\r\n    }\r\n  })\r\n\r\n  .directive('elasticTextarea', function() {\r\n    return {\r\n      restrict: 'A',\r\n      link: function(scope, el) {\r\n        el.on('input', function() {\r\n          el[0].style.height = el[0].scrollHeight + 'px'\r\n        })\r\n      }\r\n    }\r\n  })\r\n\r\n  .directive('input', inputDirective)\r\n\r\n  .directive('textarea', inputDirective)\r\n\r\n\r\nfunction inputDirective() {\r\n  return {\r\n    restrict: 'E',\r\n    require: 'ngModel',\r\n    link: function(scope, el, attrs, ngModel) {\r\n      ngModel.$options = ngModel.$options || {}\r\n      angular.extend(\r\n        ngModel.$options, \r\n        {allowInvalid: true, updateOnDefault: true}\r\n      )\r\n\r\n      scope.$watch(attrs.ngModel, function(val) {\r\n        el[val?'addClass':'removeClass']('ng-not-empty')\r\n      })\r\n    }\r\n  }  \r\n}","angular.module('ngReddit', [\r\n    'ngMessages',\r\n    'ngResource',\r\n    'ngRoute'\r\n  ])\r\n\r\n  .config(function($routeProvider, $locationProvider) {\r\n    $routeProvider\r\n      .when('/', {\r\n        templateUrl: 'views/home.html',\r\n        controller: 'homeCtrl',\r\n        reloadOnSearch: true, \r\n        resolve: {\r\n          subreddit: function($route, _posts) {\r\n            return _posts.get({\r\n              page: $route.current.params.page || 1\r\n            }).$promise\r\n          }\r\n        }\r\n      })\r\n      .when('/r/:subreddit', {\r\n        templateUrl: 'views/home.html',\r\n        controller: 'subredditCtrl',\r\n        resolve: {\r\n          subreddit: function($route, _subreddit) {\r\n            return _subreddit.get({\r\n              subreddit: $route.current.params.subreddit,\r\n              page: $route.current.params.page || 1\r\n            }).$promise\r\n          }\r\n        }\r\n      })\r\n      .when('/r/:subreddit/comments/:post', {\r\n        templateUrl: 'views/post.html',\r\n        controller: 'postCtrl',\r\n        resolve: {\r\n          subreddit: function($route, _subreddit) {\r\n            return _subreddit.get({\r\n              subreddit: $route.current.params.subreddit,\r\n              comments: 'comments',\r\n              post: $route.current.params.post\r\n            }).$promise\r\n          }\r\n        }\r\n      })\r\n      .when('/subreddits', {\r\n        templateUrl: 'views/subreddits.html',\r\n        controller: 'subredditsCtrl'\r\n      })\r\n      .when('/subreddits/create', {\r\n        templateUrl: 'views/newSubreddit.html',\r\n        controller: 'newSubredditCtrl'\r\n      })\r\n      .when('/submit/:type', {\r\n        templateUrl: 'views/submit.html',\r\n        controller: 'submitCtrl'\r\n      })\r\n      .when('/search/:query', {\r\n        templateUrl: 'views/_posts.html',\r\n        controller: 'searchCtrl',\r\n        resolve: {\r\n          results: function($route, _search) {\r\n            return _search.query({\r\n              query: $route.current.params.query\r\n            })\r\n          }\r\n        }\r\n      })      \r\n      .when('/signup', {\r\n        templateUrl: 'views/signup.html',\r\n        controller: 'signupCtrl'\r\n      })\r\n      .when('/login', {\r\n        templateUrl: 'views/login.html',\r\n        controller: 'loginCtrl'\r\n      })\r\n\r\n\r\n    $locationProvider.html5Mode(true)\r\n  })\r\n\r\n  .config(function($httpProvider) {\r\n    $httpProvider.interceptors.push(function($q, $rootScope) {\r\n      function onError(err) {\r\n        console.error(err)\r\n        $rootScope.errors.push(err.data)\r\n        return $q.reject(err)\r\n      }\r\n\r\n      return {\r\n        requestError: onError,\r\n        responseError: onError\r\n      }\r\n    })\r\n  })","angular\r\n  .module('ngReddit')\r\n\r\n  .controller('mainCtrl', function($rootScope, $scope, $http, $location,\r\n                          $anchorScroll, _subreddit, _vote, _remove) {\r\n    $scope.page = +$location.search().page || 1\r\n    $rootScope.errors = []\r\n    $rootScope.history = []\r\n    $scope.vote = _vote\r\n\r\n    $http.get('/api/check/auth').success(function(user) {\r\n      $rootScope.user = user\r\n    })\r\n\r\n    $scope.logout = function() {\r\n      $http.get('/api/logout').success(function() {\r\n        $rootScope.user = null\r\n      })\r\n    } \r\n\r\n    $scope.delete = function(posts, post) { \r\n      return _subreddit.delete({\r\n        subreddit: post.subreddit,\r\n        comments: 'comments',\r\n        post: post._id\r\n      }, function() {\r\n        _remove(posts, post)\r\n        if (~$location.path().search('comments')) \r\n          $location.path('/')\r\n      })\r\n    }\r\n\r\n    $scope.isVoted = function(post, n) {\r\n      if (!$rootScope.user) return false  \r\n\r\n      var vote = n > 0 ? 'upvotes' : 'downvotes' \r\n\r\n      return ~post[vote].indexOf($rootScope.user.username)\r\n    } \r\n\r\n    $scope.changePage = function(n) { \r\n      $location.search('page', $scope.page += n)\r\n      $anchorScroll(0)\r\n    }\r\n\r\n    $scope.search = function() {     \r\n      $location.path('/search/' + window.encodeURIComponent($scope.query))\r\n      $scope.query = ''\r\n    }\r\n\r\n    $rootScope.$on('$routeChangeSuccess', function() {\r\n      $rootScope.history.push($location.$$path)\r\n    })\r\n  })\r\n\r\n  .controller('homeCtrl', function($scope, $rootScope, $routeParams, \r\n                          subreddit) {\r\n    $rootScope.subreddit = subreddit\r\n  })\r\n\r\n  .controller('subredditCtrl', function($rootScope, $scope, $routeParams, \r\n                                subreddit) {\r\n    $rootScope.subreddit = subreddit\r\n  })\r\n\r\n  .controller('subredditsCtrl', function($scope, $http) {\r\n    $http\r\n      .get('/api/r')\r\n      .success(function(subreddits) {\r\n        $scope.subreddits = subreddits\r\n      })\r\n  })\r\n\r\n  .controller('newSubredditCtrl', function($scope, $http, $location, \r\n                                  _setDirty) {\r\n    $scope.newSubreddit = {}\r\n\r\n    $scope.submit = function() {\r\n      if ($scope.newSubredditForm.$invalid)\r\n        return _setDirty($scope.newSubredditForm)\r\n\r\n      $http\r\n        .post('/api/r', $scope.newSubreddit)\r\n        .success(function(subreddit) {\r\n          $location.path('/r/' + subreddit.name)\r\n        })\r\n    }\r\n  })\r\n\r\n  .controller('postCtrl', function($rootScope, $scope, $http,\r\n                          subreddit, _subreddit, _setDirty, _remove) {\r\n    $scope.newComment = {}\r\n    $scope.expandText = true\r\n    $rootScope.subreddit = subreddit\r\n\r\n    $scope.addComment = function() {\r\n      if ($scope.newCommentForm.$invalid)\r\n        return _setDirty($scope.newCommentForm)\r\n\r\n      _subreddit.save({\r\n        subreddit: $scope.subreddit.name,\r\n        comments: 'comments',\r\n        post: $scope.subreddit.posts[0]._id\r\n      }, $scope.newComment, function(comment) {\r\n        $scope.subreddit.posts[0].comments.push(comment)\r\n        $scope.newComment = {}\r\n        $scope.newCommentForm.comment.$setPristine()\r\n      })\r\n    }\r\n\r\n    $scope.deleteComment = function(comment) {\r\n      $http\r\n        .delete('/api/comments/' + comment._id)\r\n        .success(function() {\r\n          _remove($scope.subreddit.posts[0].comments, comment)\r\n        })\r\n\r\n      return false\r\n    }\r\n  })\r\n\r\n  .controller('submitCtrl', function($scope, $routeParams, $location, \r\n                            _subreddit, _setDirty) {\r\n    $scope.newPost = {}\r\n    $scope.type = $routeParams.type\r\n    \r\n    if ($scope.subreddit) \r\n      $scope.newPost.subreddit = $scope.subreddit.name\r\n\r\n    $scope.submit = function() {\r\n      if ($scope.newPostForm.$invalid)\r\n        return _setDirty($scope.newPostForm)\r\n\r\n      _subreddit.save({ \r\n        subreddit: $scope.newPost.subreddit \r\n      }, $scope.newPost, function(post) {\r\n        $location.path('/r/' + post.subreddit + '/comments/' + post._id)\r\n      })\r\n    }\r\n  })\r\n\r\n  .controller('searchCtrl', function($scope, results) {\r\n    $scope.subreddit = {\r\n      posts: results\r\n    }\r\n  })\r\n\r\n  .controller('signupCtrl', function($rootScope, $scope, $http, $location,\r\n                            _afterLogin, _setDirty) {\r\n    if ($rootScope.user) return $location.path('/')\r\n    $scope.newUser = {}\r\n\r\n    $scope.signup = function() {\r\n      if ($scope.signupForm.$invalid) \r\n        return _setDirty($scope.signupForm)\r\n\r\n      $http\r\n        .post('/api/signup', $scope.newUser)\r\n        .success(_afterLogin)\r\n    }\r\n  })\r\n\r\n  .controller('loginCtrl', function($rootScope, $scope, $http, $location,\r\n                           _afterLogin, _setDirty) {\r\n    if ($rootScope.user) return $location.path('/')\r\n    $scope.loggedUser = {}\r\n\r\n    $scope.login = function() {\r\n      if ($scope.loginForm.$invalid)\r\n        return _setDirty($scope.loginForm)\r\n\r\n      $http\r\n        .post('/api/login', $scope.loggedUser)\r\n        .success(_afterLogin)\r\n    }\r\n  })","angular\r\n  .module('ngReddit')\r\n\r\n  .factory('_subreddit', function($resource) {\r\n    return $resource('/api/r/:subreddit/:comments/:post')\r\n  })\r\n\r\n  .factory('_posts', function($resource) {\r\n    return $resource('/api/posts/')\r\n  })\r\n\r\n  .factory('_search', function($resource) {\r\n    return $resource('/api/search/:query')\r\n  })\r\n\r\n  .factory('_authUser', function($resource) {\r\n    return $resource('/api/authcheck')\r\n  })\r\n\r\n  .factory('_remove', function() {\r\n    return function(a, e) {\r\n      var i = a.indexOf(e)\r\n      if (i > -1) return a.splice(i, 1)\r\n    }\r\n  })\r\n\r\n  .factory('_vote', function($http, $rootScope, _remove) {\r\n    return function(post, n) {\r\n      if (!$rootScope.user) return\r\n        \r\n      var username = $rootScope.user.username,\r\n          vote = n > 0 ? 'upvotes' : 'downvotes',\r\n          url = '/api/' + \r\n                (post.comments ? 'posts/' : 'comments/') + \r\n                post._id + '/vote/' + n\r\n\r\n      $http.put(url).success(function() {\r\n        if (~post[vote].indexOf(username))\r\n          _remove(post[vote], username)\r\n        else\r\n          post[vote].push(username)\r\n        \r\n        _remove(post[n < 0 ? 'upvotes' : 'downvotes'], username)\r\n      })\r\n    }\r\n  })\r\n\r\n  .factory('_afterLogin', function($http, $rootScope, $location) {\r\n    return function(user) {\r\n      $rootScope.user = user\r\n      $location.path($rootScope.history[$rootScope.history.length-2] || '/')\r\n    }\r\n  })\r\n\r\n  .factory('_setDirty', function() {\r\n    return function(form) {\r\n      for (var k in form) \r\n        if (/^[^$]/.test(k)) form[k].$setDirty()      \r\n    }\r\n  })","angular\r\n  .module('ngReddit')\r\n\r\n  .filter('pluralize', function() {\r\n    // {{post.comments.length + ' комментари(й,я,ев)' | pluralize}}\r\n\r\n    return function(s) {\r\n      var n = '' + parseInt(s),\r\n          last = n.slice(-1)\r\n\r\n      return s.replace(/\\(([^)]+)\\)/, function(m) {\r\n        m = m.slice(1, -1).split(',')\r\n\r\n        if (n.slice(-2, -1) == 1 || last > 4 || last === '0')\r\n          return m[2]\r\n        else if (last == 1)\r\n          return m[0]\r\n        else\r\n          return m[1]\r\n      })\r\n    }\r\n  })\r\n\r\n  .filter('fromNow', function() {\r\n    return function(date) {\r\n      return moment(date).fromNow()\r\n    }\r\n  })\r\n\r\n  .filter('md', function($sce) { \r\n    return function(text) {\r\n      return $sce.trustAsHtml(markdown.toHTML(text || ''))\r\n    }\r\n  })\r\n\r\n  .filter('hostname', function() {\r\n    return function(link) {\r\n      if (!link) return 'self'\r\n      var a = document.createElement('a')\r\n      a.href = link\r\n      return a.hostname\r\n    }\r\n  })"],"sourceRoot":"/source/"}