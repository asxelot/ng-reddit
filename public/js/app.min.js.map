{"version":3,"sources":["app.js","app.min.js","controllers.js","directives.js","factories.js","filters.js"],"names":["angular","module","config","$routeProvider","$locationProvider","when","templateUrl","controller","resolve","posts","_posts","query","subreddit","$route","_subreddit","get","current","params","comments","post","html5Mode","$httpProvider","interceptors","push","$q","$rootScope","onError","err","console","error","errors","data","reject","requestError","responseError","r","e","t","$scope","$http","$location","_remove","history","success","user","logout","_id","$on","$$path","$routeParams","newPost","type","_afterLogin","path","newUser","signup","password","confirmPassword","loggedUser","login","directive","checkSubreddit","val","subr","restrict","require","link","scope","el","attrs","ngModel","$asyncValidators","checkUsername","checkEmail","email","$validators","matchPassword","$watch","$validate","on","style","height","scrollHeight","factory","$resource","a","i","indexOf","splice","slice","n","url","put","vote","username","filter","s","parseInt","last","replace","m","split"],"mappings":"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","file":"app.min.js","sourcesContent":["angular.module('ngReddit', [\r\n    'ngResource',\r\n    'ngRoute'\r\n  ])\r\n\r\n  .config(function($routeProvider, $locationProvider) {\r\n    $routeProvider\r\n      .when('/', {\r\n        templateUrl: 'views/home.html',\r\n        controller: 'homeCtrl',\r\n        resolve: {\r\n          posts: function(_posts) {\r\n            return _posts.query()\r\n          }\r\n        }\r\n      })\r\n      .when('/r/:subreddit', {\r\n        templateUrl: 'views/subreddit.html',\r\n        controller: 'subredditCtrl',\r\n        resolve: {\r\n          subreddit: function($route, _subreddit) {\r\n            return _subreddit.get({\r\n              subreddit: $route.current.params.subreddit\r\n            })\r\n          }\r\n        }\r\n      })\r\n      .when('/r/:subreddit/comments/:post', {\r\n        templateUrl: 'views/post.html',\r\n        controller: 'postCtrl',\r\n        resolve: {\r\n          subreddit: function($route, _subreddit) {\r\n            return _subreddit.get({\r\n              subreddit: $route.current.params.subreddit,\r\n              comments: 'comments',\r\n              post: $route.current.params.post\r\n            })\r\n          }\r\n        }\r\n      })\r\n      .when('/submit/:type', {\r\n        templateUrl: 'views/submit.html',\r\n        controller: 'submitCtrl'\r\n      })\r\n      .when('/signup', {\r\n        templateUrl: 'views/signup.html',\r\n        controller: 'signupCtrl'\r\n      })\r\n      .when('/login', {\r\n        templateUrl: 'views/login.html',\r\n        controller: 'loginCtrl'\r\n      })\r\n\r\n\r\n    $locationProvider.html5Mode(true)\r\n\r\n    // $rootScope.$on('$routeChangeSuccess', function() {\r\n\r\n    // })\r\n  })\r\n\r\n  .config(function($httpProvider) {\r\n    $httpProvider.interceptors.push(function($q, $rootScope) {\r\n      function onError(err) {\r\n        console.error(err)\r\n        $rootScope.errors.push(err.data)\r\n        return $q.reject(err)\r\n      }\r\n\r\n      return {\r\n        requestError: onError,\r\n        responseError: onError\r\n      }\r\n    })\r\n  })\r\n","angular.module(\"ngReddit\",[\"ngResource\",\"ngRoute\"]).config([\"$routeProvider\",\"$locationProvider\",function(r,e){r.when(\"/\",{templateUrl:\"views/home.html\",controller:\"homeCtrl\",resolve:{posts:[\"_posts\",function(r){return r.query()}]}}).when(\"/r/:subreddit\",{templateUrl:\"views/subreddit.html\",controller:\"subredditCtrl\",resolve:{subreddit:[\"$route\",\"_subreddit\",function(r,e){return e.get({subreddit:r.current.params.subreddit})}]}}).when(\"/r/:subreddit/comments/:post\",{templateUrl:\"views/post.html\",controller:\"postCtrl\",resolve:{subreddit:[\"$route\",\"_subreddit\",function(r,e){return e.get({subreddit:r.current.params.subreddit,comments:\"comments\",post:r.current.params.post})}]}}).when(\"/submit/:type\",{templateUrl:\"views/submit.html\",controller:\"submitCtrl\"}).when(\"/signup\",{templateUrl:\"views/signup.html\",controller:\"signupCtrl\"}).when(\"/login\",{templateUrl:\"views/login.html\",controller:\"loginCtrl\"}),e.html5Mode(!0)}]).config([\"$httpProvider\",function(r){r.interceptors.push([\"$q\",\"$rootScope\",function(r,e){function t(t){return console.error(t),e.errors.push(t.data),r.reject(t)}return{requestError:t,responseError:t}}])}]);\r\n//# sourceMappingURL=app.min.js.map","angular\r\n  .module('ngReddit')\r\n\r\n  .controller('mainCtrl', function($rootScope, $scope, $http, $location,\r\n                          _subreddit, _remove) {\r\n    $rootScope.errors = []\r\n    $rootScope.history = []\r\n\r\n    $http.get('/api/check/auth').success(function(user) {\r\n      $rootScope.user = user\r\n    })\r\n\r\n    $scope.logout = function() {\r\n      $http.get('/api/logout').success(function() {\r\n        $rootScope.user = null\r\n      })\r\n    }\r\n\r\n    $scope.delete = function(post) {\r\n      return _subreddit.delete({\r\n        subreddit: post.subreddit,\r\n        comments: 'comments',\r\n        post: post._id\r\n      }, function() {\r\n        _remove(posts, post)\r\n      })\r\n    }\r\n\r\n    $rootScope.$on('$routeChangeSuccess', function() {\r\n      $rootScope.history.push($location.$$path)\r\n    })\r\n  })\r\n\r\n  .controller('homeCtrl', function($scope) {\r\n    $scope.posts = posts\r\n  })\r\n\r\n  .controller('subredditCtrl', function($scope, subreddit) {\r\n    $scope.subreddit = subreddit\r\n  })\r\n\r\n  .controller('postCtrl', function($scope, subreddit) {\r\n    $scope.subreddit = subreddit\r\n  })\r\n\r\n  .controller('submitCtrl', function($scope, $routeParams) {\r\n    $scope.newPost = {}\r\n    $scope.type = $routeParams.type\r\n  })\r\n\r\n  .controller('signupCtrl', function($rootScope, $scope, $http, $location,\r\n                            _afterLogin) {\r\n    if ($rootScope.user) return $location.path('/')\r\n    $scope.newUser = {}\r\n\r\n    $scope.signup = function() {\r\n      if ($scope.newUser.password !== $scope.newUser.confirmPassword)\r\n        return false\r\n\r\n      $http\r\n        .post('/api/signup', $scope.newUser)\r\n        .success(_afterLogin)\r\n    }\r\n  })\r\n\r\n  .controller('loginCtrl', function($rootScope, $scope, $http, $location,\r\n                           _afterLogin) {\r\n    if ($rootScope.user) return $location.path('/')\r\n    $scope.loggedUser = {}\r\n\r\n    $scope.login = function() {\r\n      $http\r\n        .post('/api/login', $scope.loggedUser)\r\n        .success(_afterLogin)\r\n    }\r\n  })","angular\r\n  .module('ngReddit')\r\n\r\n  .directive('subredditValidator', function($q, $http) {\r\n    function checkSubreddit(val) {\r\n      return $q(function(resolve, reject) {\r\n        $http\r\n          .get('/api/check/r/' + val)\r\n          .success(function(subr) {\r\n            subr ? resolve() : reject()\r\n          })\r\n      })\r\n    }\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function(scope, el, attrs, ngModel) {\r\n        ngModel.$asyncValidators.checkSubreddit = checkSubreddit\r\n      }\r\n    }\r\n  })\r\n\r\n  .directive('usernameValidator', function($q, $http) {\r\n    function checkUsername(val) {\r\n      return $q(function(resolve, reject) {\r\n        $http\r\n          .get('/api/check/u/' + val)\r\n          .success(function(user) {\r\n            user ? reject() : resolve()\r\n          })\r\n      })\r\n    }\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function(scope, el, attrs, ngModel) {\r\n        ngModel.$asyncValidators.checkUsername = checkUsername\r\n      }\r\n    }\r\n  })\r\n\r\n  .directive('emailValidator', function($q, $http) {\r\n    function checkEmail(val) {\r\n      return $q(function(resolve, reject) {\r\n        $http\r\n          .get('/api/check/email/' + val)\r\n          .success(function(email) {\r\n            email ? reject() : resolve()\r\n          })\r\n      })\r\n    }\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function(scope, el, attrs, ngModel) {\r\n        ngModel.$asyncValidators.checkEmail = checkEmail\r\n      }\r\n    }\r\n  })\r\n\r\n  .directive('matchTo', function() {\r\n    return {\r\n      restrict: 'A',\r\n      scope: {\r\n        password: '=matchTo'\r\n      },\r\n      require: 'ngModel',\r\n      link: function(scope, el, attrs, ngModel) {\r\n        ngModel.$validators.matchPassword = function(confirmPassword) {\r\n          return scope.password == confirmPassword\r\n        }\r\n\r\n        scope.$watch('password', ngModel.$validate)\r\n      }\r\n    }\r\n  })\r\n\r\n  .directive('elasticTextarea', function() {\r\n    return {\r\n      restrict: 'A',\r\n      link: function(scope, el) {\r\n        el.on('input', function() {\r\n          el[0].style.height = el[0].scrollHeight + 'px'\r\n        })\r\n      }\r\n    }\r\n  })","angular\r\n  .module('ngReddit')\r\n\r\n  .factory('_subreddit', function($resource) {\r\n    return $resource('/api/r/:subreddit/:comments/:post')\r\n  })\r\n\r\n  .factory('_posts', function($resource) {\r\n    return $resource('/api/posts/')\r\n  })\r\n\r\n  .factory('_authUser', function($resource) {\r\n    return $resource('/api/authcheck')\r\n  })\r\n\r\n  .factory('_remove', function() {\r\n    return function(a, e) {\r\n      var i = a.indexOf(e)\r\n      if (i > -1) return a.splice(i, 1)\r\n    }\r\n  })\r\n\r\n  .factory('_afterLogin', function($http, $rootScope, $location) {\r\n    return function(user) {\r\n      $rootScope.user = user\r\n      $location.path($rootScope.history.slice(-2)[0] || '/')\r\n    }\r\n  })\r\n\r\n  .factory('_vote', function($http, $rootScope, _remove) {\r\n    return function(n, post, url) {\r\n      $http.put(url).success(function() {\r\n        if (!$rootScope.user) return\r\n\r\n        var vote = n > 0 ? 'upvoted' : 'downvoted',\r\n            username = $rootScope.user.username\r\n\r\n        if (~post[vote].indexOf(username))\r\n          _remove(post[vote], username)\r\n        else\r\n          post[vote].push(username)\r\n        _remove(post[n < 0 ? 'upvoted' : 'downvoted'], username)\r\n      })\r\n    }\r\n  })\r\n","angular\r\n  .module('ngReddit')\r\n\r\n  .filter('pluralize', function() {\r\n    // {{post.comments.length + ' комментари(й,я,ев)' | pluralize}}\r\n\r\n    return function(s) {\r\n      var n = '' + parseInt(s),\r\n          last = n.slice(-1)\r\n\r\n      return s.replace(/\\(([^)]+)\\)/, function(m) {\r\n        m = m.slice(1, -1).split(',')\r\n\r\n        if (n.slice(-2, -1) == 1 || last > 4 || last === '0')\r\n          return m[2]\r\n        else if (last == 1)\r\n          return m[0]\r\n        else\r\n          return m[1]\r\n      })\r\n    }\r\n  })\r\n"],"sourceRoot":"/source/"}