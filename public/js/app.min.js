function inputDirective(){return{restrict:"E",require:"ngModel",link:function(t,e,r,n){n.$options=n.$options||{},angular.extend(n.$options,{allowInvalid:!0,updateOnDefault:!0}),t.$watch(r.ngModel,function(t){e[t?"addClass":"removeClass"]("ng-not-empty")})}}}angular.module("ngReddit",["ngMessages","ngResource","ngRoute"]).config(["$routeProvider","$locationProvider",function(t,e){t.when("/",{templateUrl:"views/home.html",controller:"homeCtrl",reloadOnSearch:!0,resolve:{subreddit:["$route","_posts",function(t,e){return e.get({page:t.current.params.page||1}).$promise}]}}).when("/r/:subreddit",{templateUrl:"views/home.html",controller:"subredditCtrl",resolve:{subreddit:["$route","_subreddit",function(t,e){return e.get({subreddit:t.current.params.subreddit,page:t.current.params.page||1}).$promise}]}}).when("/r/:subreddit/comments/:post",{templateUrl:"views/post.html",controller:"postCtrl",resolve:{subreddit:["$route","_subreddit",function(t,e){return e.get({subreddit:t.current.params.subreddit,comments:"comments",post:t.current.params.post}).$promise}]}}).when("/subreddits",{templateUrl:"views/subreddits.html",controller:"subredditsCtrl"}).when("/subreddits/create",{templateUrl:"views/newSubreddit.html",controller:"newSubredditCtrl"}).when("/submit/:type",{templateUrl:"views/submit.html",controller:"submitCtrl"}).when("/search/:query",{templateUrl:"views/_posts.html",controller:"searchCtrl",resolve:{results:["$route","_search",function(t,e){return e.query({query:t.current.params.query})}]}}).when("/signup",{templateUrl:"views/signup.html",controller:"signupCtrl"}).when("/login",{templateUrl:"views/login.html",controller:"loginCtrl"}),e.html5Mode(!0)}]).config(["$httpProvider",function(t){t.interceptors.push(["$q","$rootScope",function(t,e){function r(r){return console.error(r),e.errors.push(r.data),t.reject(r)}return{requestError:r,responseError:r}}])}]),angular.module("ngReddit").controller("mainCtrl",["$rootScope","$scope","$http","$location","$anchorScroll","_subreddit","_vote",function(t,e,r,n,o,i,s){e.page=+n.search().page||1,t.errors=[],t.history=[],e.vote=s,r.get("/api/check/auth").success(function(e){t.user=e}),e.logout=function(){r.get("/api/logout").success(function(){t.user=null})},e["delete"]=function(t,e){return i["delete"]({subreddit:e.subreddit,comments:"comments",post:e._id},function(){_remove(t,e),~n.path().search("comments")&&n.path("/")})},e.isVoted=function(e,r){if(!t.user)return!1;var n=r>0?"upvotes":"downvotes";return~e[n].indexOf(t.user.username)},e.changePage=function(t){n.search("page",e.page+=t),o(0)},e.search=function(){n.path("/search/"+window.encodeURIComponent(e.query)),e.query=""},t.$on("$routeChangeSuccess",function(){t.history.push(n.$$path)})}]).controller("homeCtrl",["$scope","$rootScope","$routeParams","subreddit",function(t,e,r,n){e.subreddit=n}]).controller("subredditCtrl",["$rootScope","$scope","$routeParams","subreddit",function(t,e,r,n){t.subreddit=n}]).controller("subredditsCtrl",["$scope","$http",function(t,e){e.get("/api/r").success(function(e){t.subreddits=e})}]).controller("newSubredditCtrl",["$scope","$http","$location","_setDirty",function(t,e,r,n){t.newSubreddit={},t.submit=function(){return t.newSubredditForm.$invalid?n(t.newSubredditForm):void e.post("/api/r",t.newSubreddit).success(function(t){r.path("/r/"+t.name)})}}]).controller("postCtrl",["$rootScope","$scope","$http","subreddit","_subreddit","_setDirty","_remove",function(t,e,r,n,o,i,s){e.newComment={},e.expandText=!0,t.subreddit=n,e.addComment=function(){return e.newCommentForm.$invalid?i(e.newCommentForm):void o.save({subreddit:e.subreddit.name,comments:"comments",post:e.subreddit.posts[0]._id},e.newComment,function(t){e.subreddit.posts[0].comments.push(t),e.newComment={},e.newCommentForm.comment.$setPristine()})},e.deleteComment=function(t){return r["delete"]("/api/comments/"+t._id).success(function(){s(e.subreddit.posts[0].comments,t)}),!1}}]).controller("submitCtrl",["$scope","$routeParams","$location","_subreddit","_setDirty",function(t,e,r,n,o){t.newPost={},t.type=e.type,t.subreddit&&(t.newPost.subreddit=t.subreddit.name),t.submit=function(){return t.newPostForm.$invalid?o(t.newPostForm):void n.save({subreddit:t.newPost.subreddit},t.newPost,function(t){r.path("/r/"+t.subreddit+"/comments/"+t._id)})}}]).controller("searchCtrl",["$scope","results",function(t,e){t.subreddit={posts:e}}]).controller("signupCtrl",["$rootScope","$scope","$http","$location","_afterLogin","_setDirty",function(t,e,r,n,o,i){return t.user?n.path("/"):(e.newUser={},void(e.signup=function(){return e.signupForm.$invalid?i(e.signupForm):void r.post("/api/signup",e.newUser).success(o)}))}]).controller("loginCtrl",["$rootScope","$scope","$http","$location","_afterLogin","_setDirty",function(t,e,r,n,o,i){return t.user?n.path("/"):(e.loggedUser={},void(e.login=function(){return e.loginForm.$invalid?i(e.loginForm):void r.post("/api/login",e.loggedUser).success(o)}))}]),angular.module("ngReddit").directive("subredditExist",["$q","$http",function(t,e){function r(r){return t(function(t,n){e.get("/api/check/r/"+r).success(function(e){e?t():n()})})}return{restrict:"A",require:"ngModel",link:function(t,e,n,o){o.$asyncValidators.subredditExist=r}}}]).directive("subredditAvailable",["$q","$http",function(t,e){function r(r){return t(function(t,n){e.get("/api/check/r/"+r).success(function(e){e?n():t()})})}return{restrict:"A",require:"ngModel",link:function(t,e,n,o){o.$asyncValidators.subredditAvailable=r}}}]).directive("usernameValidator",["$q","$http",function(t,e){function r(r){return t(function(t,n){e.get("/api/check/u/"+r).success(function(e){e?n():t()})})}function n(t){return/^[a-zA-Z][a-zA-Z0-9]+$/.test(t)}return{restrict:"A",require:"ngModel",link:function(t,e,o,i){i.$asyncValidators.checkUsername=r,i.$validators.invalidUsername=n}}}]).directive("emailExist",["$q","$http",function(t,e){function r(r){return t(function(t,n){e.get("/api/check/email/"+r).success(function(e){e?n():t()})})}return{restrict:"A",require:"ngModel",link:function(t,e,n,o){o.$asyncValidators.emailExist=r}}}]).directive("matchTo",function(){return{restrict:"A",scope:{password:"=matchTo"},require:"ngModel",link:function(t,e,r,n){n.$validators.matchPassword=function(e){return t.password==e},t.$watch("password",n.$validate)}}}).directive("elasticTextarea",function(){return{restrict:"A",link:function(t,e){e.on("input",function(){e[0].style.height=e[0].scrollHeight+"px"})}}}).directive("input",inputDirective).directive("textarea",inputDirective),angular.module("ngReddit").factory("_subreddit",["$resource",function(t){return t("/api/r/:subreddit/:comments/:post")}]).factory("_posts",["$resource",function(t){return t("/api/posts/")}]).factory("_search",["$resource",function(t){return t("/api/search/:query")}]).factory("_authUser",["$resource",function(t){return t("/api/authcheck")}]).factory("_remove",function(){return function(t,e){var r=t.indexOf(e);return r>-1?t.splice(r,1):void 0}}).factory("_vote",["$http","$rootScope","_remove",function(t,e,r){return function(n,o){if(e.user){var i=e.user.username,s=o>0?"upvotes":"downvotes",u="/api/"+(n.comments?"posts/":"comments/")+n._id+"/vote/"+o;t.put(u).success(function(){~n[s].indexOf(i)?r(n[s],i):n[s].push(i),r(n[0>o?"upvotes":"downvotes"],i)})}}}]).factory("_afterLogin",["$http","$rootScope","$location",function(t,e,r){return function(t){e.user=t,r.path(e.history[e.history.length-2]||"/")}}]).factory("_setDirty",function(){return function(t){for(var e in t)/^[^$]/.test(e)&&t[e].$setDirty()}}),angular.module("ngReddit").filter("pluralize",function(){return function(t){var e=""+parseInt(t),r=e.slice(-1);return t.replace(/\(([^)]+)\)/,function(t){return t=t.slice(1,-1).split(","),1==e.slice(-2,-1)||r>4||"0"===r?t[2]:1==r?t[0]:t[1]})}}).filter("fromNow",function(){return function(t){return moment(t).fromNow()}}).filter("md",["$sce",function(t){return function(e){return t.trustAsHtml(markdown.toHTML(e||""))}}]).filter("hostname",function(){return function(t){if(!t)return"self";var e=document.createElement("a");return e.href=t,e.hostname}});
//# sourceMappingURL=data:application/json;base64,
